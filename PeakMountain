
// Peak Index in a Mountain Array

// An array arr a mountain if the following properties hold:

// arr.length >= 3
// There exists some i with 0 < i < arr.length - 1 such that:
// arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
// arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
// Given a mountain array arr, return the index i such that arr[0] < arr[1] < ... < arr[i - 1] < arr[i] > arr//[i + 1] > ... > arr[arr.length - 1].

// You must solve it in O(log(arr.length)) time complexity.//

#include <iostream>
#include <vector>
using namespace std;

int peakelement(int arr[], int n)
{
    int s = 0;
    int e = n - 1;
    while (s < e)
    {
        int mid = s + (e - s) / 2;
        if (arr[mid] < arr[mid + 1])
        {
            s = mid + 1;
        }
        else
        {
            e = mid;
        }
    }
    return e;
}
int main()
{
    int n = 3;
    int arr[4] = {0, 1, 2, 0};
    int res = peakelement(arr, n);
    cout << res;

    return 0;
}
